/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// noinspection ES6UnusedImports
// Generated by unplugin-vue-router. ‼️ DO NOT MODIFY THIS FILE ‼️
// It's recommended to commit this file.
// Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry.

declare module 'vue-router/auto-resolver' {
  export type ParamParserCustom = never
}

declare module 'vue-router/auto-routes' {
  import type {
    RouteRecordInfo,
    ParamValue,
    ParamValueOneOrMore,
    ParamValueZeroOrMore,
    ParamValueZeroOrOne,
  } from 'vue-router'

  /**
   * Route name map generated by unplugin-vue-router
   */
  export interface RouteNamedMap {
    '/': RouteRecordInfo<
      '/',
      '/',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/404': RouteRecordInfo<
      '/404',
      '/404',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/info/': RouteRecordInfo<
      '/info/',
      '/info',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/info/activity.[id]': RouteRecordInfo<
      '/info/activity.[id]',
      '/info/activity/:id',
      { id: ParamValue<true> },
      { id: ParamValue<false> },
      | never
    >,
    '/info/components/list': RouteRecordInfo<
      '/info/components/list',
      '/info/components/list',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/info/job.[id]': RouteRecordInfo<
      '/info/job.[id]',
      '/info/job/:id',
      { id: ParamValue<true> },
      { id: ParamValue<false> },
      | never
    >,
    '/info/search': RouteRecordInfo<
      '/info/search',
      '/info/search',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/my/': RouteRecordInfo<
      '/my/',
      '/my',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/my/login': RouteRecordInfo<
      '/my/login',
      '/my/login',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/my/register': RouteRecordInfo<
      '/my/register',
      '/my/register',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
  }

  /**
   * Route file to route info map by unplugin-vue-router.
   * Used by the \`sfc-typed-router\` Volar plugin to automatically type \`useRoute()\`.
   *
   * Each key is a file path relative to the project root with 2 properties:
   * - routes: union of route names of the possible routes when in this page (passed to useRoute<...>())
   * - views: names of nested views (can be passed to <RouterView name="...">)
   *
   * @internal
   */
  export interface _RouteFileInfoMap {
    'src/pages/index.vue': {
      routes:
        | '/'
      views:
        | never
    }
    'src/pages/404.vue': {
      routes:
        | '/404'
      views:
        | never
    }
    'src/pages/info/index.vue': {
      routes:
        | '/info/'
      views:
        | never
    }
    'src/pages/info/activity.[id].vue': {
      routes:
        | '/info/activity.[id]'
      views:
        | never
    }
    'src/pages/info/components/list.vue': {
      routes:
        | '/info/components/list'
      views:
        | never
    }
    'src/pages/info/job.[id].vue': {
      routes:
        | '/info/job.[id]'
      views:
        | never
    }
    'src/pages/info/search.vue': {
      routes:
        | '/info/search'
      views:
        | never
    }
    'src/pages/my/index.vue': {
      routes:
        | '/my/'
      views:
        | never
    }
    'src/pages/my/login.vue': {
      routes:
        | '/my/login'
      views:
        | never
    }
    'src/pages/my/register.vue': {
      routes:
        | '/my/register'
      views:
        | never
    }
  }

  /**
   * Get a union of possible route names in a certain route component file.
   * Used by the \`sfc-typed-router\` Volar plugin to automatically type \`useRoute()\`.
   *
   * @internal
   */
  export type _RouteNamesForFilePath<FilePath extends string> =
    _RouteFileInfoMap extends Record<FilePath, infer Info>
      ? Info['routes']
      : keyof RouteNamedMap
}
